{"version":3,"sources":["serviceWorker.js","components/Cube.js","components/App.js","index.js"],"names":["Boolean","window","location","hostname","match","StyledCube","styled","div","faces","position","background","content","Cube","useState","angles","setAngles","useEffect","event","callback","isMobile","e","console","warn","view","innerWidth","innerHeight","clientX","clientY","x","y","addEventListener","removeEventListener","className","style","transform","map","index","key","classNames","backgroundColor","StyledApp","App","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"2NAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,gzCCbN,IAAMC,EAAaC,IAAOC,IAAV,KA+CVC,EAAQ,CACZ,CACEC,SAAU,QACVC,WAAY,0BACZC,QAAS,cAEX,CACEF,SAAU,OACVC,WAAY,mBACZC,QAAS,kBAEX,CACEF,SAAU,OACVC,WAAY,mBACZC,QAAS,qBAEX,CACEF,SAAU,QACVC,WAAY,oBACZC,QAAS,qBAEX,CACEF,SAAU,MACVC,WAAY,mBACZC,QAAS,qBAEX,CACEF,SAAU,SACVC,WAAY,oBACZC,QAAS,sBAIE,SAASC,IAAQ,IAAD,EACDC,mBAAS,MADR,mBACtBC,EADsB,KACdC,EADc,KA4B7B,OAzBAC,qBAAU,WACR,IAAIC,EACAC,EAoBJ,OAlBIC,YACFF,EAAQ,oBAERC,EAAW,SAACE,GACVC,QAAQC,KAAKF,MAGfH,EAAQ,YAERC,EAAW,YAA8D,IAAD,IAA1DK,KAAQC,EAAkD,EAAlDA,WAAYC,EAAsC,EAAtCA,YAAeC,EAAuB,EAAvBA,QAASC,EAAc,EAAdA,QACxDZ,EAAU,CACRa,EAAmC,IAA/B,GAAMD,EAAUF,GACpBI,EAAmC,KAA9B,GAAMH,EAAUF,OAK3BvB,OAAO6B,iBAAiBb,EAAOC,GACxB,kBAAMjB,OAAO8B,oBAAoBd,EAAOC,MAC9C,IAGD,kBAACb,EAAD,CACE2B,UAAU,OACVC,MACEnB,EACI,CAAEoB,UAAU,WAAD,OAAapB,EAAOc,EAApB,wBAAqCd,EAAOe,EAA5C,SACX,IAGLrB,EAAM2B,KAAI,WAAoCC,GAApC,IAAG3B,EAAH,EAAGA,SAAUC,EAAb,EAAaA,WAAYC,EAAzB,EAAyBA,QAAzB,OACT,yBACE0B,IAAKD,EACLJ,UAAWM,IAAW,OAAQ7B,GAC9BwB,MAAO,CAAEM,gBAAiB7B,IAEzBC,O,8KC5HX,IAAM6B,EAAYlC,IAAOC,IAAV,KAQA,SAASkC,IACtB,OACE,kBAACD,EAAD,CAAWR,UAAU,OACnB,kBAACpB,EAAD,O,MCTN8B,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAACH,EAAD,OAEFI,SAASC,eAAe,SHyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLjC,QAAQiC,MAAMA,EAAMC,c","file":"static/js/main.22330a6e.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React, { useState, useEffect } from 'react'\nimport styled from 'styled-components'\nimport classNames from 'classnames'\nimport { isMobile } from 'react-device-detect'\n\nconst StyledCube = styled.div`\n  box-sizing: border-box;\n  height: 50vmin;\n  perspective: 400vmin;\n  transform-style: preserve-3d;\n  width: 50vmin;\n  .face {\n    align-items: center;\n    background-color: rgba(0, 0, 0, 0.5);\n    border: calc(0.4vmin) solid #000;\n    box-sizing: inherit;\n    color: #fff;\n    display: flex;\n    font-size: 5vmin;\n    height: 100%;\n    justify-content: center;\n    position: absolute;\n    text-align: center;\n    text-transform: uppercase;\n    text-shadow: 0 0.5vmin #000, 0 -0.5vmin #000, 0.5vmin 0 #000,\n      -0.5vmin 0 #000, 0.4vmin 0.4vmin #000, -0.4vmin -0.4vmin #000,\n      0.4vmin -0.4vmin #000, -0.4vmin 0.4vmin #000;\n    font-weight: 700;\n    width: 100%;\n    &.front {\n      transform: translateZ(25vmin);\n    }\n    &.back {\n      /* Mirrored on purpose */\n      transform: translateZ(-25vmin);\n      /* transform: rotateY(180deg) translateZ(25vmin); */\n    }\n    &.left {\n      transform: rotateY(-90deg) translateZ(25vmin);\n    }\n    &.right {\n      transform: rotateY(90deg) translateZ(25vmin);\n    }\n    &.top {\n      transform: rotateX(90deg) translateZ(25vmin);\n    }\n    &.bottom {\n      transform: rotateX(-90deg) translateZ(25vmin);\n    }\n  }\n`\n\nconst faces = [\n  {\n    position: 'front',\n    background: 'rgba(51, 169, 82, 0.95)',\n    content: 'Spellbased'\n  },\n  {\n    position: 'back',\n    background: 'rgb(249, 122, 4)',\n    content: \"You'll love it\"\n  },\n  {\n    position: 'left',\n    background: 'rgb(234, 68, 53)',\n    content: 'Under development'\n  },\n  {\n    position: 'right',\n    background: 'rgb(66, 133, 243)',\n    content: 'Under development'\n  },\n  {\n    position: 'top',\n    background: 'rgb(251, 189, 4)',\n    content: 'Under development'\n  },\n  {\n    position: 'bottom',\n    background: 'rgb(143, 67, 242)',\n    content: 'Under development'\n  }\n]\n\nexport default function Cube() {\n  const [angles, setAngles] = useState(null)\n\n  useEffect(() => {\n    let event\n    let callback\n\n    if (isMobile) {\n      event = 'deviceorientation'\n\n      callback = (e) => {\n        console.warn(e)\n      }\n    } else {\n      event = 'mousemove'\n\n      callback = ({ view: { innerWidth, innerHeight }, clientX, clientY }) => {\n        setAngles({\n          x: (0.5 - clientY / innerHeight) * 90,\n          y: -(0.5 - clientX / innerWidth) * 90\n        })\n      }\n    }\n\n    window.addEventListener(event, callback)\n    return () => window.removeEventListener(event, callback)\n  }, [])\n\n  return (\n    <StyledCube\n      className=\"cube\"\n      style={\n        angles\n          ? { transform: `rotateX(${angles.x}deg) rotateY(${angles.y}deg)` }\n          : {}\n      }\n    >\n      {faces.map(({ position, background, content }, index) => (\n        <div\n          key={index}\n          className={classNames('face', position)}\n          style={{ backgroundColor: background }}\n        >\n          {content}\n        </div>\n      ))}\n    </StyledCube>\n  )\n}\n","import React from 'react'\nimport styled from 'styled-components'\nimport Cube from './Cube'\n\nconst StyledApp = styled.div`\n  align-items: center;\n  display: flex;\n  justify-content: center;\n  height: 100%;\n  width: 100%;\n`\n\nexport default function App() {\n  return (\n    <StyledApp className=\"app\">\n      <Cube />\n    </StyledApp>\n  )\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport * as serviceWorker from './serviceWorker'\nimport App from './components/App'\nimport './index.css'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n\nserviceWorker.unregister()\n"],"sourceRoot":""}